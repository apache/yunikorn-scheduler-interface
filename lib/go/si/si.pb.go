// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yunikorn-scheduler-interface/si.proto

package si // import "lib/go/si"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import descriptorpb "google.golang.org/protobuf/types/descriptorpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TerminationType int32

const (
	TerminationType_UNKNOWN_TERMINATION_TYPE TerminationType = 0
	TerminationType_STOPPED_BY_RM            TerminationType = 1
	TerminationType_TIMEOUT                  TerminationType = 2
	TerminationType_PREEMPTED_BY_SCHEDULER   TerminationType = 3
	TerminationType_PLACEHOLDER_REPLACED     TerminationType = 4
)

var TerminationType_name = map[int32]string{
	0: "UNKNOWN_TERMINATION_TYPE",
	1: "STOPPED_BY_RM",
	2: "TIMEOUT",
	3: "PREEMPTED_BY_SCHEDULER",
	4: "PLACEHOLDER_REPLACED",
}
var TerminationType_value = map[string]int32{
	"UNKNOWN_TERMINATION_TYPE": 0,
	"STOPPED_BY_RM":            1,
	"TIMEOUT":                  2,
	"PREEMPTED_BY_SCHEDULER":   3,
	"PLACEHOLDER_REPLACED":     4,
}

func (x TerminationType) String() string {
	return proto.EnumName(TerminationType_name, int32(x))
}
func (TerminationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{0}
}

// Action from RM
type NodeInfo_ActionFromRM int32

const (
	// ActionFromRM not set
	NodeInfo_UNKNOWN_ACTION_FROM_RM NodeInfo_ActionFromRM = 0
	// Create Node
	NodeInfo_CREATE NodeInfo_ActionFromRM = 1
	// Update node resources, attributes.
	NodeInfo_UPDATE NodeInfo_ActionFromRM = 2
	// Do not allocate new allocations on the node.
	NodeInfo_DRAIN_NODE NodeInfo_ActionFromRM = 3
	// Decomission node, it will immediately stop allocations on the node and
	// remove the node from schedulable lists.
	NodeInfo_DECOMISSION NodeInfo_ActionFromRM = 4
	// From Draining state to SCHEDULABLE state.
	// If node is not in draining state, error will be thrown
	NodeInfo_DRAIN_TO_SCHEDULABLE NodeInfo_ActionFromRM = 5
)

var NodeInfo_ActionFromRM_name = map[int32]string{
	0: "UNKNOWN_ACTION_FROM_RM",
	1: "CREATE",
	2: "UPDATE",
	3: "DRAIN_NODE",
	4: "DECOMISSION",
	5: "DRAIN_TO_SCHEDULABLE",
}
var NodeInfo_ActionFromRM_value = map[string]int32{
	"UNKNOWN_ACTION_FROM_RM": 0,
	"CREATE":                 1,
	"UPDATE":                 2,
	"DRAIN_NODE":             3,
	"DECOMISSION":            4,
	"DRAIN_TO_SCHEDULABLE":   5,
}

func (x NodeInfo_ActionFromRM) String() string {
	return proto.EnumName(NodeInfo_ActionFromRM_name, int32(x))
}
func (NodeInfo_ActionFromRM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{24, 0}
}

// container scheduling states
type UpdateContainerSchedulingStateRequest_SchedulingState int32

const (
	// SchedulingState not set
	UpdateContainerSchedulingStateRequest_UNKNOWN_SCHEDULING_STATE UpdateContainerSchedulingStateRequest_SchedulingState = 0
	// the container is being skipped by the scheduler
	UpdateContainerSchedulingStateRequest_SKIPPED UpdateContainerSchedulingStateRequest_SchedulingState = 1
	// the container is scheduled and it has been assigned to a node
	UpdateContainerSchedulingStateRequest_SCHEDULED UpdateContainerSchedulingStateRequest_SchedulingState = 2
	// the container is reserved on some node, but not yet assigned
	UpdateContainerSchedulingStateRequest_RESERVED UpdateContainerSchedulingStateRequest_SchedulingState = 3
	// scheduler has visited all candidate nodes for this container
	// but non of them could satisfy this container's requirement
	UpdateContainerSchedulingStateRequest_FAILED UpdateContainerSchedulingStateRequest_SchedulingState = 4
)

var UpdateContainerSchedulingStateRequest_SchedulingState_name = map[int32]string{
	0: "UNKNOWN_SCHEDULING_STATE",
	1: "SKIPPED",
	2: "SCHEDULED",
	3: "RESERVED",
	4: "FAILED",
}
var UpdateContainerSchedulingStateRequest_SchedulingState_value = map[string]int32{
	"UNKNOWN_SCHEDULING_STATE": 0,
	"SKIPPED":                  1,
	"SCHEDULED":                2,
	"RESERVED":                 3,
	"FAILED":                   4,
}

func (x UpdateContainerSchedulingStateRequest_SchedulingState) String() string {
	return proto.EnumName(UpdateContainerSchedulingStateRequest_SchedulingState_name, int32(x))
}
func (UpdateContainerSchedulingStateRequest_SchedulingState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{29, 0}
}

type EventRecord_Type int32

const (
	// EventRecord Type not set
	EventRecord_UNKNOWN_EVENTRECORD_TYPE EventRecord_Type = 0
	EventRecord_REQUEST                  EventRecord_Type = 1
	EventRecord_APP                      EventRecord_Type = 2
	EventRecord_NODE                     EventRecord_Type = 3
	EventRecord_QUEUE                    EventRecord_Type = 4
)

var EventRecord_Type_name = map[int32]string{
	0: "UNKNOWN_EVENTRECORD_TYPE",
	1: "REQUEST",
	2: "APP",
	3: "NODE",
	4: "QUEUE",
}
var EventRecord_Type_value = map[string]int32{
	"UNKNOWN_EVENTRECORD_TYPE": 0,
	"REQUEST":                  1,
	"APP":                      2,
	"NODE":                     3,
	"QUEUE":                    4,
}

func (x EventRecord_Type) String() string {
	return proto.EnumName(EventRecord_Type_name, int32(x))
}
func (EventRecord_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{31, 0}
}

type EventRecord_ChangeType int32

const (
	EventRecord_NONE   EventRecord_ChangeType = 0
	EventRecord_SET    EventRecord_ChangeType = 1
	EventRecord_ADD    EventRecord_ChangeType = 2
	EventRecord_REMOVE EventRecord_ChangeType = 3
)

var EventRecord_ChangeType_name = map[int32]string{
	0: "NONE",
	1: "SET",
	2: "ADD",
	3: "REMOVE",
}
var EventRecord_ChangeType_value = map[string]int32{
	"NONE":   0,
	"SET":    1,
	"ADD":    2,
	"REMOVE": 3,
}

func (x EventRecord_ChangeType) String() string {
	return proto.EnumName(EventRecord_ChangeType_name, int32(x))
}
func (EventRecord_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{31, 1}
}

type RegisterResourceManagerRequest struct {
	// An ID which can uniquely identify a RM **cluster**. (For example, if a RM cluster has multiple manager instances for HA purpose, they should use the same information when do registration).
	// If RM register with the same ID, all previous scheduling state in memory will be cleaned up, and expect RM report full scheduling state after registration.
	RmID string `protobuf:"bytes,1,opt,name=rmID,proto3" json:"rmID,omitempty"`
	// Version of RM scheduler interface client.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Policy group name:
	// This defines which policy to use. Policy should be statically configured. (Think about network security group concept of ec2).
	// Different RMs can refer to the same policyGroup if their static configuration is identical.
	PolicyGroup string `protobuf:"bytes,3,opt,name=policyGroup,proto3" json:"policyGroup,omitempty"`
	// Pass the build information of k8shim to core.
	BuildInfo map[string]string `protobuf:"bytes,4,rep,name=buildInfo,proto3" json:"buildInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pass the serialized configuration for this policyGroup to core.
	Config string `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Additional configuration key/value pairs for configuration not related to the policyGroup.
	ExtraConfig          map[string]string `protobuf:"bytes,6,rep,name=extraConfig,proto3" json:"extraConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisterResourceManagerRequest) Reset()         { *m = RegisterResourceManagerRequest{} }
func (m *RegisterResourceManagerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterResourceManagerRequest) ProtoMessage()    {}
func (*RegisterResourceManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{0}
}
func (m *RegisterResourceManagerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResourceManagerRequest.Unmarshal(m, b)
}
func (m *RegisterResourceManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResourceManagerRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterResourceManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResourceManagerRequest.Merge(dst, src)
}
func (m *RegisterResourceManagerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterResourceManagerRequest.Size(m)
}
func (m *RegisterResourceManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResourceManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResourceManagerRequest proto.InternalMessageInfo

func (m *RegisterResourceManagerRequest) GetRmID() string {
	if m != nil {
		return m.RmID
	}
	return ""
}

func (m *RegisterResourceManagerRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RegisterResourceManagerRequest) GetPolicyGroup() string {
	if m != nil {
		return m.PolicyGroup
	}
	return ""
}

func (m *RegisterResourceManagerRequest) GetBuildInfo() map[string]string {
	if m != nil {
		return m.BuildInfo
	}
	return nil
}

func (m *RegisterResourceManagerRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *RegisterResourceManagerRequest) GetExtraConfig() map[string]string {
	if m != nil {
		return m.ExtraConfig
	}
	return nil
}

// Upon success, scheduler returns RegisterResourceManagerResponse to RM, otherwise RM receives exception.
type RegisterResourceManagerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResourceManagerResponse) Reset()         { *m = RegisterResourceManagerResponse{} }
func (m *RegisterResourceManagerResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResourceManagerResponse) ProtoMessage()    {}
func (*RegisterResourceManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{1}
}
func (m *RegisterResourceManagerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResourceManagerResponse.Unmarshal(m, b)
}
func (m *RegisterResourceManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResourceManagerResponse.Marshal(b, m, deterministic)
}
func (dst *RegisterResourceManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResourceManagerResponse.Merge(dst, src)
}
func (m *RegisterResourceManagerResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResourceManagerResponse.Size(m)
}
func (m *RegisterResourceManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResourceManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResourceManagerResponse proto.InternalMessageInfo

type AllocationRequest struct {
	// New allocation requests or replace existing allocation request (if allocationID is same)
	Asks []*AllocationAsk `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	// Allocations can be released.
	Releases *AllocationReleasesRequest `protobuf:"bytes,2,opt,name=releases,proto3" json:"releases,omitempty"`
	// ID of RM, this will be used to identify which RM of the request comes from.
	RmID                 string   `protobuf:"bytes,3,opt,name=rmID,proto3" json:"rmID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationRequest) Reset()         { *m = AllocationRequest{} }
func (m *AllocationRequest) String() string { return proto.CompactTextString(m) }
func (*AllocationRequest) ProtoMessage()    {}
func (*AllocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{2}
}
func (m *AllocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationRequest.Unmarshal(m, b)
}
func (m *AllocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationRequest.Marshal(b, m, deterministic)
}
func (dst *AllocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationRequest.Merge(dst, src)
}
func (m *AllocationRequest) XXX_Size() int {
	return xxx_messageInfo_AllocationRequest.Size(m)
}
func (m *AllocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationRequest proto.InternalMessageInfo

func (m *AllocationRequest) GetAsks() []*AllocationAsk {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *AllocationRequest) GetReleases() *AllocationReleasesRequest {
	if m != nil {
		return m.Releases
	}
	return nil
}

func (m *AllocationRequest) GetRmID() string {
	if m != nil {
		return m.RmID
	}
	return ""
}

type ApplicationRequest struct {
	// RM should explicitly add application when allocation request also explictly belongs to application.
	// This is optional if allocation request doesn't belong to a application. (Independent allocation)
	New []*AddApplicationRequest `protobuf:"bytes,1,rep,name=new,proto3" json:"new,omitempty"`
	// RM can also remove applications, all allocation/allocation requests associated with the application will be removed
	Remove []*RemoveApplicationRequest `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
	// ID of RM, this will be used to identify which RM of the request comes from.
	RmID                 string   `protobuf:"bytes,3,opt,name=rmID,proto3" json:"rmID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationRequest) Reset()         { *m = ApplicationRequest{} }
func (m *ApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationRequest) ProtoMessage()    {}
func (*ApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{3}
}
func (m *ApplicationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationRequest.Unmarshal(m, b)
}
func (m *ApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationRequest.Marshal(b, m, deterministic)
}
func (dst *ApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationRequest.Merge(dst, src)
}
func (m *ApplicationRequest) XXX_Size() int {
	return xxx_messageInfo_ApplicationRequest.Size(m)
}
func (m *ApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationRequest proto.InternalMessageInfo

func (m *ApplicationRequest) GetNew() []*AddApplicationRequest {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *ApplicationRequest) GetRemove() []*RemoveApplicationRequest {
	if m != nil {
		return m.Remove
	}
	return nil
}

func (m *ApplicationRequest) GetRmID() string {
	if m != nil {
		return m.RmID
	}
	return ""
}

type NodeRequest struct {
	// New node can be scheduled. If a node is notified to be "unscheduable", it needs to be part of this field as well.
	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// ID of RM, this will be used to identify which RM of the request comes from.
	RmID                 string   `protobuf:"bytes,2,opt,name=rmID,proto3" json:"rmID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRequest) Reset()         { *m = NodeRequest{} }
func (m *NodeRequest) String() string { return proto.CompactTextString(m) }
func (*NodeRequest) ProtoMessage()    {}
func (*NodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{4}
}
func (m *NodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRequest.Unmarshal(m, b)
}
func (m *NodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRequest.Marshal(b, m, deterministic)
}
func (dst *NodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRequest.Merge(dst, src)
}
func (m *NodeRequest) XXX_Size() int {
	return xxx_messageInfo_NodeRequest.Size(m)
}
func (m *NodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRequest proto.InternalMessageInfo

func (m *NodeRequest) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NodeRequest) GetRmID() string {
	if m != nil {
		return m.RmID
	}
	return ""
}

type AllocationResponse struct {
	// New allocations
	New []*Allocation `protobuf:"bytes,1,rep,name=new,proto3" json:"new,omitempty"`
	// Released allocations, this could be either ack from scheduler when RM asks to terminate some allocations.
	// Or it could be decision made by scheduler (such as preemption or timeout).
	Released []*AllocationRelease `protobuf:"bytes,2,rep,name=released,proto3" json:"released,omitempty"`
	// Released allocation asks(placeholder), when the placeholder allocation times out
	ReleasedAsks []*AllocationAskRelease `protobuf:"bytes,3,rep,name=releasedAsks,proto3" json:"releasedAsks,omitempty"`
	// Rejected allocation requests
	Rejected             []*RejectedAllocationAsk `protobuf:"bytes,4,rep,name=rejected,proto3" json:"rejected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AllocationResponse) Reset()         { *m = AllocationResponse{} }
func (m *AllocationResponse) String() string { return proto.CompactTextString(m) }
func (*AllocationResponse) ProtoMessage()    {}
func (*AllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{5}
}
func (m *AllocationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationResponse.Unmarshal(m, b)
}
func (m *AllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationResponse.Marshal(b, m, deterministic)
}
func (dst *AllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationResponse.Merge(dst, src)
}
func (m *AllocationResponse) XXX_Size() int {
	return xxx_messageInfo_AllocationResponse.Size(m)
}
func (m *AllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationResponse proto.InternalMessageInfo

func (m *AllocationResponse) GetNew() []*Allocation {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *AllocationResponse) GetReleased() []*AllocationRelease {
	if m != nil {
		return m.Released
	}
	return nil
}

func (m *AllocationResponse) GetReleasedAsks() []*AllocationAskRelease {
	if m != nil {
		return m.ReleasedAsks
	}
	return nil
}

func (m *AllocationResponse) GetRejected() []*RejectedAllocationAsk {
	if m != nil {
		return m.Rejected
	}
	return nil
}

type ApplicationResponse struct {
	// Rejected Applications
	Rejected []*RejectedApplication `protobuf:"bytes,1,rep,name=rejected,proto3" json:"rejected,omitempty"`
	// Accepted Applications
	Accepted []*AcceptedApplication `protobuf:"bytes,2,rep,name=accepted,proto3" json:"accepted,omitempty"`
	// Updated Applications
	Updated              []*UpdatedApplication `protobuf:"bytes,3,rep,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ApplicationResponse) Reset()         { *m = ApplicationResponse{} }
func (m *ApplicationResponse) String() string { return proto.CompactTextString(m) }
func (*ApplicationResponse) ProtoMessage()    {}
func (*ApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{6}
}
func (m *ApplicationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationResponse.Unmarshal(m, b)
}
func (m *ApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationResponse.Marshal(b, m, deterministic)
}
func (dst *ApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationResponse.Merge(dst, src)
}
func (m *ApplicationResponse) XXX_Size() int {
	return xxx_messageInfo_ApplicationResponse.Size(m)
}
func (m *ApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationResponse proto.InternalMessageInfo

func (m *ApplicationResponse) GetRejected() []*RejectedApplication {
	if m != nil {
		return m.Rejected
	}
	return nil
}

func (m *ApplicationResponse) GetAccepted() []*AcceptedApplication {
	if m != nil {
		return m.Accepted
	}
	return nil
}

func (m *ApplicationResponse) GetUpdated() []*UpdatedApplication {
	if m != nil {
		return m.Updated
	}
	return nil
}

type NodeResponse struct {
	// Rejected Node Registrations
	Rejected []*RejectedNode `protobuf:"bytes,1,rep,name=rejected,proto3" json:"rejected,omitempty"`
	// Accepted Node Registrations
	Accepted             []*AcceptedNode `protobuf:"bytes,2,rep,name=accepted,proto3" json:"accepted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodeResponse) Reset()         { *m = NodeResponse{} }
func (m *NodeResponse) String() string { return proto.CompactTextString(m) }
func (*NodeResponse) ProtoMessage()    {}
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{7}
}
func (m *NodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeResponse.Unmarshal(m, b)
}
func (m *NodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeResponse.Marshal(b, m, deterministic)
}
func (dst *NodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResponse.Merge(dst, src)
}
func (m *NodeResponse) XXX_Size() int {
	return xxx_messageInfo_NodeResponse.Size(m)
}
func (m *NodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResponse proto.InternalMessageInfo

func (m *NodeResponse) GetRejected() []*RejectedNode {
	if m != nil {
		return m.Rejected
	}
	return nil
}

func (m *NodeResponse) GetAccepted() []*AcceptedNode {
	if m != nil {
		return m.Accepted
	}
	return nil
}

type UpdatedApplication struct {
	// The application ID that was updated
	ApplicationID string `protobuf:"bytes,1,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// State of the application
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// Timestamp of the state transition
	StateTransitionTimestamp int64 `protobuf:"varint,3,opt,name=stateTransitionTimestamp,proto3" json:"stateTransitionTimestamp,omitempty"`
	// Detailed message
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatedApplication) Reset()         { *m = UpdatedApplication{} }
func (m *UpdatedApplication) String() string { return proto.CompactTextString(m) }
func (*UpdatedApplication) ProtoMessage()    {}
func (*UpdatedApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{8}
}
func (m *UpdatedApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatedApplication.Unmarshal(m, b)
}
func (m *UpdatedApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatedApplication.Marshal(b, m, deterministic)
}
func (dst *UpdatedApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedApplication.Merge(dst, src)
}
func (m *UpdatedApplication) XXX_Size() int {
	return xxx_messageInfo_UpdatedApplication.Size(m)
}
func (m *UpdatedApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedApplication.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedApplication proto.InternalMessageInfo

func (m *UpdatedApplication) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *UpdatedApplication) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *UpdatedApplication) GetStateTransitionTimestamp() int64 {
	if m != nil {
		return m.StateTransitionTimestamp
	}
	return 0
}

func (m *UpdatedApplication) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RejectedApplication struct {
	// The application ID that was rejected
	ApplicationID string `protobuf:"bytes,1,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// A human-readable reason message
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectedApplication) Reset()         { *m = RejectedApplication{} }
func (m *RejectedApplication) String() string { return proto.CompactTextString(m) }
func (*RejectedApplication) ProtoMessage()    {}
func (*RejectedApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{9}
}
func (m *RejectedApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RejectedApplication.Unmarshal(m, b)
}
func (m *RejectedApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RejectedApplication.Marshal(b, m, deterministic)
}
func (dst *RejectedApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectedApplication.Merge(dst, src)
}
func (m *RejectedApplication) XXX_Size() int {
	return xxx_messageInfo_RejectedApplication.Size(m)
}
func (m *RejectedApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectedApplication.DiscardUnknown(m)
}

var xxx_messageInfo_RejectedApplication proto.InternalMessageInfo

func (m *RejectedApplication) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *RejectedApplication) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AcceptedApplication struct {
	// The application ID that was accepted
	ApplicationID        string   `protobuf:"bytes,1,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptedApplication) Reset()         { *m = AcceptedApplication{} }
func (m *AcceptedApplication) String() string { return proto.CompactTextString(m) }
func (*AcceptedApplication) ProtoMessage()    {}
func (*AcceptedApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{10}
}
func (m *AcceptedApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptedApplication.Unmarshal(m, b)
}
func (m *AcceptedApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptedApplication.Marshal(b, m, deterministic)
}
func (dst *AcceptedApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedApplication.Merge(dst, src)
}
func (m *AcceptedApplication) XXX_Size() int {
	return xxx_messageInfo_AcceptedApplication.Size(m)
}
func (m *AcceptedApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedApplication.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedApplication proto.InternalMessageInfo

func (m *AcceptedApplication) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

type RejectedNode struct {
	// The node ID that was rejected
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// A human-readable reason message
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectedNode) Reset()         { *m = RejectedNode{} }
func (m *RejectedNode) String() string { return proto.CompactTextString(m) }
func (*RejectedNode) ProtoMessage()    {}
func (*RejectedNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{11}
}
func (m *RejectedNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RejectedNode.Unmarshal(m, b)
}
func (m *RejectedNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RejectedNode.Marshal(b, m, deterministic)
}
func (dst *RejectedNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectedNode.Merge(dst, src)
}
func (m *RejectedNode) XXX_Size() int {
	return xxx_messageInfo_RejectedNode.Size(m)
}
func (m *RejectedNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectedNode.DiscardUnknown(m)
}

var xxx_messageInfo_RejectedNode proto.InternalMessageInfo

func (m *RejectedNode) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *RejectedNode) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AcceptedNode struct {
	// The node ID that was accepted
	NodeID               string   `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptedNode) Reset()         { *m = AcceptedNode{} }
func (m *AcceptedNode) String() string { return proto.CompactTextString(m) }
func (*AcceptedNode) ProtoMessage()    {}
func (*AcceptedNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{12}
}
func (m *AcceptedNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptedNode.Unmarshal(m, b)
}
func (m *AcceptedNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptedNode.Marshal(b, m, deterministic)
}
func (dst *AcceptedNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedNode.Merge(dst, src)
}
func (m *AcceptedNode) XXX_Size() int {
	return xxx_messageInfo_AcceptedNode.Size(m)
}
func (m *AcceptedNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedNode.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedNode proto.InternalMessageInfo

func (m *AcceptedNode) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

// A sparse map of resource to Quantity.
type Resource struct {
	Resources            map[string]*Quantity `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{13}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (dst *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(dst, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetResources() map[string]*Quantity {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Quantity includes a single int64 value
type Quantity struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quantity) Reset()         { *m = Quantity{} }
func (m *Quantity) String() string { return proto.CompactTextString(m) }
func (*Quantity) ProtoMessage()    {}
func (*Quantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{14}
}
func (m *Quantity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quantity.Unmarshal(m, b)
}
func (m *Quantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quantity.Marshal(b, m, deterministic)
}
func (dst *Quantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quantity.Merge(dst, src)
}
func (m *Quantity) XXX_Size() int {
	return xxx_messageInfo_Quantity.Size(m)
}
func (m *Quantity) XXX_DiscardUnknown() {
	xxx_messageInfo_Quantity.DiscardUnknown(m)
}

var xxx_messageInfo_Quantity proto.InternalMessageInfo

func (m *Quantity) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type AllocationAsk struct {
	// Allocation key is used by both of scheduler and RM to track allocations.
	// It doesn't have to be same as RM's internal allocation id (such as Pod name of K8s or ContainerID of YARN).
	// Allocations from the same AllocationAsk which are returned to the RM at the same time will have the same allocationKey.
	// The request is considered an update of the existing AllocationAsk if an ALlocationAsk with the same allocationKey
	// already exists.
	AllocationKey string `protobuf:"bytes,1,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// The application ID this allocation ask belongs to
	ApplicationID string `protobuf:"bytes,2,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// The partition the application belongs to
	PartitionName string `protobuf:"bytes,3,opt,name=partitionName,proto3" json:"partitionName,omitempty"`
	// The amount of resources per ask
	ResourceAsk *Resource `protobuf:"bytes,4,opt,name=resourceAsk,proto3" json:"resourceAsk,omitempty"`
	// Maximum number of allocations
	MaxAllocations int32 `protobuf:"varint,5,opt,name=maxAllocations,proto3" json:"maxAllocations,omitempty"`
	// Priority of ask
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Execution timeout: How long this allocation will be terminated (by scheduler)
	// once allocated by scheduler, 0 or negative value means never expire.
	ExecutionTimeoutMilliSeconds int64 `protobuf:"varint,7,opt,name=executionTimeoutMilliSeconds,proto3" json:"executionTimeoutMilliSeconds,omitempty"`
	// A set of tags for this spscific AllocationAsk. Allocation level tags are used in placing this specific
	// ask on nodes in the cluster. These tags are used in the PlacementConstraints.
	// These tags are optional.
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the TaskGroup this ask belongs to
	TaskGroupName string `protobuf:"bytes,9,opt,name=taskGroupName,proto3" json:"taskGroupName,omitempty"`
	// Is this a placeholder ask (true) or a real ask (false), defaults to false
	// ignored if the taskGroupName is not set
	Placeholder bool `protobuf:"varint,10,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// Is this ask the originator of the application?
	Originator bool `protobuf:"varint,11,opt,name=Originator,proto3" json:"Originator,omitempty"`
	// The preemption policy for this ask
	PreemptionPolicy     *PreemptionPolicy `protobuf:"bytes,12,opt,name=preemptionPolicy,proto3" json:"preemptionPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AllocationAsk) Reset()         { *m = AllocationAsk{} }
func (m *AllocationAsk) String() string { return proto.CompactTextString(m) }
func (*AllocationAsk) ProtoMessage()    {}
func (*AllocationAsk) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{15}
}
func (m *AllocationAsk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationAsk.Unmarshal(m, b)
}
func (m *AllocationAsk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationAsk.Marshal(b, m, deterministic)
}
func (dst *AllocationAsk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationAsk.Merge(dst, src)
}
func (m *AllocationAsk) XXX_Size() int {
	return xxx_messageInfo_AllocationAsk.Size(m)
}
func (m *AllocationAsk) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationAsk.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationAsk proto.InternalMessageInfo

func (m *AllocationAsk) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *AllocationAsk) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *AllocationAsk) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

func (m *AllocationAsk) GetResourceAsk() *Resource {
	if m != nil {
		return m.ResourceAsk
	}
	return nil
}

func (m *AllocationAsk) GetMaxAllocations() int32 {
	if m != nil {
		return m.MaxAllocations
	}
	return 0
}

func (m *AllocationAsk) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *AllocationAsk) GetExecutionTimeoutMilliSeconds() int64 {
	if m != nil {
		return m.ExecutionTimeoutMilliSeconds
	}
	return 0
}

func (m *AllocationAsk) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AllocationAsk) GetTaskGroupName() string {
	if m != nil {
		return m.TaskGroupName
	}
	return ""
}

func (m *AllocationAsk) GetPlaceholder() bool {
	if m != nil {
		return m.Placeholder
	}
	return false
}

func (m *AllocationAsk) GetOriginator() bool {
	if m != nil {
		return m.Originator
	}
	return false
}

func (m *AllocationAsk) GetPreemptionPolicy() *PreemptionPolicy {
	if m != nil {
		return m.PreemptionPolicy
	}
	return nil
}

type PreemptionPolicy struct {
	// Opt-out from preemption
	AllowPreemptSelf bool `protobuf:"varint,1,opt,name=allowPreemptSelf,proto3" json:"allowPreemptSelf,omitempty"`
	// Allow preemption of other tasks with same or lower priority
	AllowPreemptOther    bool     `protobuf:"varint,2,opt,name=allowPreemptOther,proto3" json:"allowPreemptOther,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreemptionPolicy) Reset()         { *m = PreemptionPolicy{} }
func (m *PreemptionPolicy) String() string { return proto.CompactTextString(m) }
func (*PreemptionPolicy) ProtoMessage()    {}
func (*PreemptionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{16}
}
func (m *PreemptionPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreemptionPolicy.Unmarshal(m, b)
}
func (m *PreemptionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreemptionPolicy.Marshal(b, m, deterministic)
}
func (dst *PreemptionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptionPolicy.Merge(dst, src)
}
func (m *PreemptionPolicy) XXX_Size() int {
	return xxx_messageInfo_PreemptionPolicy.Size(m)
}
func (m *PreemptionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptionPolicy proto.InternalMessageInfo

func (m *PreemptionPolicy) GetAllowPreemptSelf() bool {
	if m != nil {
		return m.AllowPreemptSelf
	}
	return false
}

func (m *PreemptionPolicy) GetAllowPreemptOther() bool {
	if m != nil {
		return m.AllowPreemptOther
	}
	return false
}

type AddApplicationRequest struct {
	// The ID of the application, must be unique
	ApplicationID string `protobuf:"bytes,1,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// The queue this application is requesting. The scheduler will place the application into a
	// queue according to policy, taking into account the requested queue as per the policy.
	QueueName string `protobuf:"bytes,2,opt,name=queueName,proto3" json:"queueName,omitempty"`
	// The partition the application belongs to
	PartitionName string `protobuf:"bytes,3,opt,name=partitionName,proto3" json:"partitionName,omitempty"`
	// The user group information of the application owner
	Ugi *UserGroupInformation `protobuf:"bytes,4,opt,name=ugi,proto3" json:"ugi,omitempty"`
	// A set of tags for the application. These tags provide application level generic inforamtion.
	// The tags are optional and are used in placing an appliction or scheduling.
	// Application tags are not considered when processing AllocationAsks.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Execution timeout: How long this application can be in a running state
	// 0 or negative value means never expire.
	ExecutionTimeoutMilliSeconds int64 `protobuf:"varint,6,opt,name=executionTimeoutMilliSeconds,proto3" json:"executionTimeoutMilliSeconds,omitempty"`
	// The total amount of resources gang placeholders will request
	PlaceholderAsk *Resource `protobuf:"bytes,7,opt,name=placeholderAsk,proto3" json:"placeholderAsk,omitempty"`
	// Gang scheduling style can be hard (the application will fail after placeholder timeout)
	// or soft (after the timeout the application will be scheduled as a normal application)
	GangSchedulingStyle  string   `protobuf:"bytes,8,opt,name=gangSchedulingStyle,proto3" json:"gangSchedulingStyle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddApplicationRequest) Reset()         { *m = AddApplicationRequest{} }
func (m *AddApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*AddApplicationRequest) ProtoMessage()    {}
func (*AddApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{17}
}
func (m *AddApplicationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddApplicationRequest.Unmarshal(m, b)
}
func (m *AddApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddApplicationRequest.Marshal(b, m, deterministic)
}
func (dst *AddApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddApplicationRequest.Merge(dst, src)
}
func (m *AddApplicationRequest) XXX_Size() int {
	return xxx_messageInfo_AddApplicationRequest.Size(m)
}
func (m *AddApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddApplicationRequest proto.InternalMessageInfo

func (m *AddApplicationRequest) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *AddApplicationRequest) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *AddApplicationRequest) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

func (m *AddApplicationRequest) GetUgi() *UserGroupInformation {
	if m != nil {
		return m.Ugi
	}
	return nil
}

func (m *AddApplicationRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AddApplicationRequest) GetExecutionTimeoutMilliSeconds() int64 {
	if m != nil {
		return m.ExecutionTimeoutMilliSeconds
	}
	return 0
}

func (m *AddApplicationRequest) GetPlaceholderAsk() *Resource {
	if m != nil {
		return m.PlaceholderAsk
	}
	return nil
}

func (m *AddApplicationRequest) GetGangSchedulingStyle() string {
	if m != nil {
		return m.GangSchedulingStyle
	}
	return ""
}

type RemoveApplicationRequest struct {
	// The ID of the application to remove
	ApplicationID string `protobuf:"bytes,1,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// The partition the application belongs to
	PartitionName        string   `protobuf:"bytes,2,opt,name=partitionName,proto3" json:"partitionName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveApplicationRequest) Reset()         { *m = RemoveApplicationRequest{} }
func (m *RemoveApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveApplicationRequest) ProtoMessage()    {}
func (*RemoveApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{18}
}
func (m *RemoveApplicationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveApplicationRequest.Unmarshal(m, b)
}
func (m *RemoveApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveApplicationRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveApplicationRequest.Merge(dst, src)
}
func (m *RemoveApplicationRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveApplicationRequest.Size(m)
}
func (m *RemoveApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveApplicationRequest proto.InternalMessageInfo

func (m *RemoveApplicationRequest) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *RemoveApplicationRequest) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

type UserGroupInformation struct {
	// the user name
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// the list of groups of the user, can be empty
	Groups               []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGroupInformation) Reset()         { *m = UserGroupInformation{} }
func (m *UserGroupInformation) String() string { return proto.CompactTextString(m) }
func (*UserGroupInformation) ProtoMessage()    {}
func (*UserGroupInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{19}
}
func (m *UserGroupInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserGroupInformation.Unmarshal(m, b)
}
func (m *UserGroupInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserGroupInformation.Marshal(b, m, deterministic)
}
func (dst *UserGroupInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroupInformation.Merge(dst, src)
}
func (m *UserGroupInformation) XXX_Size() int {
	return xxx_messageInfo_UserGroupInformation.Size(m)
}
func (m *UserGroupInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroupInformation.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroupInformation proto.InternalMessageInfo

func (m *UserGroupInformation) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserGroupInformation) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Allocation struct {
	// AllocationKey from AllocationAsk
	AllocationKey string `protobuf:"bytes,1,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// Allocation tags from AllocationAsk
	AllocationTags map[string]string `protobuf:"bytes,2,rep,name=allocationTags,proto3" json:"allocationTags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// UUID of the allocation
	UUID string `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Resource for each allocation
	ResourcePerAlloc *Resource `protobuf:"bytes,5,opt,name=resourcePerAlloc,proto3" json:"resourcePerAlloc,omitempty"`
	// Priority of ask
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Node which the allocation belongs to
	NodeID string `protobuf:"bytes,8,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// The ID of the application
	ApplicationID string `protobuf:"bytes,9,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// Partition of the allocation
	PartitionName string `protobuf:"bytes,10,opt,name=partitionName,proto3" json:"partitionName,omitempty"`
	// The name of the TaskGroup this allocation belongs to
	TaskGroupName string `protobuf:"bytes,11,opt,name=taskGroupName,proto3" json:"taskGroupName,omitempty"`
	// Is this a placeholder allocation (true) or a real allocation (false), defaults to false
	// ignored if the taskGroupName is not set
	Placeholder          bool     `protobuf:"varint,12,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Allocation) Reset()         { *m = Allocation{} }
func (m *Allocation) String() string { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()    {}
func (*Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{20}
}
func (m *Allocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Allocation.Unmarshal(m, b)
}
func (m *Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Allocation.Marshal(b, m, deterministic)
}
func (dst *Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocation.Merge(dst, src)
}
func (m *Allocation) XXX_Size() int {
	return xxx_messageInfo_Allocation.Size(m)
}
func (m *Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_Allocation proto.InternalMessageInfo

func (m *Allocation) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *Allocation) GetAllocationTags() map[string]string {
	if m != nil {
		return m.AllocationTags
	}
	return nil
}

func (m *Allocation) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Allocation) GetResourcePerAlloc() *Resource {
	if m != nil {
		return m.ResourcePerAlloc
	}
	return nil
}

func (m *Allocation) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Allocation) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Allocation) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *Allocation) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

func (m *Allocation) GetTaskGroupName() string {
	if m != nil {
		return m.TaskGroupName
	}
	return ""
}

func (m *Allocation) GetPlaceholder() bool {
	if m != nil {
		return m.Placeholder
	}
	return false
}

type AllocationReleasesRequest struct {
	// The allocations to release
	AllocationsToRelease []*AllocationRelease `protobuf:"bytes,1,rep,name=allocationsToRelease,proto3" json:"allocationsToRelease,omitempty"`
	// The asks to release
	AllocationAsksToRelease []*AllocationAskRelease `protobuf:"bytes,2,rep,name=allocationAsksToRelease,proto3" json:"allocationAsksToRelease,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                `json:"-"`
	XXX_unrecognized        []byte                  `json:"-"`
	XXX_sizecache           int32                   `json:"-"`
}

func (m *AllocationReleasesRequest) Reset()         { *m = AllocationReleasesRequest{} }
func (m *AllocationReleasesRequest) String() string { return proto.CompactTextString(m) }
func (*AllocationReleasesRequest) ProtoMessage()    {}
func (*AllocationReleasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{21}
}
func (m *AllocationReleasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationReleasesRequest.Unmarshal(m, b)
}
func (m *AllocationReleasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationReleasesRequest.Marshal(b, m, deterministic)
}
func (dst *AllocationReleasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationReleasesRequest.Merge(dst, src)
}
func (m *AllocationReleasesRequest) XXX_Size() int {
	return xxx_messageInfo_AllocationReleasesRequest.Size(m)
}
func (m *AllocationReleasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationReleasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationReleasesRequest proto.InternalMessageInfo

func (m *AllocationReleasesRequest) GetAllocationsToRelease() []*AllocationRelease {
	if m != nil {
		return m.AllocationsToRelease
	}
	return nil
}

func (m *AllocationReleasesRequest) GetAllocationAsksToRelease() []*AllocationAskRelease {
	if m != nil {
		return m.AllocationAsksToRelease
	}
	return nil
}

// Release allocation: this is a bidirectional message. The Terminationtype defines the origin, or creator,
// as per the comment. The confirmation or response from the receiver is the same message with the same
// termination type set.
type AllocationRelease struct {
	// The name of the partition the allocation belongs to
	PartitionName string `protobuf:"bytes,1,opt,name=partitionName,proto3" json:"partitionName,omitempty"`
	// The application the allocation belongs to
	ApplicationID string `protobuf:"bytes,2,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// The UUID of the allocation to release, if not set all allocations are released for
	// the applicationID
	UUID string `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Termination type of the released allocation
	TerminationType TerminationType `protobuf:"varint,4,opt,name=terminationType,proto3,enum=si.v1.TerminationType" json:"terminationType,omitempty"`
	// human-readable message
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// AllocationKey from AllocationAsk
	AllocationKey        string   `protobuf:"bytes,6,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationRelease) Reset()         { *m = AllocationRelease{} }
func (m *AllocationRelease) String() string { return proto.CompactTextString(m) }
func (*AllocationRelease) ProtoMessage()    {}
func (*AllocationRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{22}
}
func (m *AllocationRelease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationRelease.Unmarshal(m, b)
}
func (m *AllocationRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationRelease.Marshal(b, m, deterministic)
}
func (dst *AllocationRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationRelease.Merge(dst, src)
}
func (m *AllocationRelease) XXX_Size() int {
	return xxx_messageInfo_AllocationRelease.Size(m)
}
func (m *AllocationRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationRelease.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationRelease proto.InternalMessageInfo

func (m *AllocationRelease) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

func (m *AllocationRelease) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *AllocationRelease) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AllocationRelease) GetTerminationType() TerminationType {
	if m != nil {
		return m.TerminationType
	}
	return TerminationType_UNKNOWN_TERMINATION_TYPE
}

func (m *AllocationRelease) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AllocationRelease) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

// Release ask
type AllocationAskRelease struct {
	// Which partition to release the ask from, required.
	PartitionName string `protobuf:"bytes,1,opt,name=partitionName,proto3" json:"partitionName,omitempty"`
	// optional, when this is set, filter allocation key by application id.
	// when application id is set and allocationKey is not set, release all allocations key under the application id.
	ApplicationID string `protobuf:"bytes,2,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// optional, when this is set, only release allocation ask by specified
	AllocationKey string `protobuf:"bytes,3,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// Termination type of the released allocation ask
	TerminationType TerminationType `protobuf:"varint,4,opt,name=terminationType,proto3,enum=si.v1.TerminationType" json:"terminationType,omitempty"`
	// For human-readable message
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationAskRelease) Reset()         { *m = AllocationAskRelease{} }
func (m *AllocationAskRelease) String() string { return proto.CompactTextString(m) }
func (*AllocationAskRelease) ProtoMessage()    {}
func (*AllocationAskRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{23}
}
func (m *AllocationAskRelease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationAskRelease.Unmarshal(m, b)
}
func (m *AllocationAskRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationAskRelease.Marshal(b, m, deterministic)
}
func (dst *AllocationAskRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationAskRelease.Merge(dst, src)
}
func (m *AllocationAskRelease) XXX_Size() int {
	return xxx_messageInfo_AllocationAskRelease.Size(m)
}
func (m *AllocationAskRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationAskRelease.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationAskRelease proto.InternalMessageInfo

func (m *AllocationAskRelease) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

func (m *AllocationAskRelease) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *AllocationAskRelease) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *AllocationAskRelease) GetTerminationType() TerminationType {
	if m != nil {
		return m.TerminationType
	}
	return TerminationType_UNKNOWN_TERMINATION_TYPE
}

func (m *AllocationAskRelease) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type NodeInfo struct {
	// ID of node, the node must exist to be updated
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// Action to perform by the scheduler
	Action NodeInfo_ActionFromRM `protobuf:"varint,2,opt,name=action,proto3,enum=si.v1.NodeInfo_ActionFromRM" json:"action,omitempty"`
	// New attributes of node, which will replace previously reported attribute.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// new schedulable resource, scheduler may preempt allocations on the
	// node or schedule more allocations accordingly.
	SchedulableResource *Resource `protobuf:"bytes,4,opt,name=schedulableResource,proto3" json:"schedulableResource,omitempty"`
	// when the scheduler is co-exist with some other schedulers, some node
	// resources might be occupied (allocated) by other schedulers.
	OccupiedResource *Resource `protobuf:"bytes,5,opt,name=occupiedResource,proto3" json:"occupiedResource,omitempty"`
	// Allocated resources, this will be added when node registered to RM (recovery)
	ExistingAllocations  []*Allocation `protobuf:"bytes,6,rep,name=existingAllocations,proto3" json:"existingAllocations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{24}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *NodeInfo) GetAction() NodeInfo_ActionFromRM {
	if m != nil {
		return m.Action
	}
	return NodeInfo_UNKNOWN_ACTION_FROM_RM
}

func (m *NodeInfo) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *NodeInfo) GetSchedulableResource() *Resource {
	if m != nil {
		return m.SchedulableResource
	}
	return nil
}

func (m *NodeInfo) GetOccupiedResource() *Resource {
	if m != nil {
		return m.OccupiedResource
	}
	return nil
}

func (m *NodeInfo) GetExistingAllocations() []*Allocation {
	if m != nil {
		return m.ExistingAllocations
	}
	return nil
}

type RejectedAllocationAsk struct {
	AllocationKey string `protobuf:"bytes,1,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// The ID of the application
	ApplicationID string `protobuf:"bytes,2,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	// A human-readable reason message
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectedAllocationAsk) Reset()         { *m = RejectedAllocationAsk{} }
func (m *RejectedAllocationAsk) String() string { return proto.CompactTextString(m) }
func (*RejectedAllocationAsk) ProtoMessage()    {}
func (*RejectedAllocationAsk) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{25}
}
func (m *RejectedAllocationAsk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RejectedAllocationAsk.Unmarshal(m, b)
}
func (m *RejectedAllocationAsk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RejectedAllocationAsk.Marshal(b, m, deterministic)
}
func (dst *RejectedAllocationAsk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectedAllocationAsk.Merge(dst, src)
}
func (m *RejectedAllocationAsk) XXX_Size() int {
	return xxx_messageInfo_RejectedAllocationAsk.Size(m)
}
func (m *RejectedAllocationAsk) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectedAllocationAsk.DiscardUnknown(m)
}

var xxx_messageInfo_RejectedAllocationAsk proto.InternalMessageInfo

func (m *RejectedAllocationAsk) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *RejectedAllocationAsk) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *RejectedAllocationAsk) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type PredicatesArgs struct {
	// allocation key identifies a container, the predicates function is going to check
	// if this container is eligible to be placed ont to a node.
	AllocationKey string `protobuf:"bytes,1,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// the node ID the container is assigned to.
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// run the predicates for alloactions (true) or reservations (false)
	Allocate             bool     `protobuf:"varint,3,opt,name=allocate,proto3" json:"allocate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PredicatesArgs) Reset()         { *m = PredicatesArgs{} }
func (m *PredicatesArgs) String() string { return proto.CompactTextString(m) }
func (*PredicatesArgs) ProtoMessage()    {}
func (*PredicatesArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{26}
}
func (m *PredicatesArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredicatesArgs.Unmarshal(m, b)
}
func (m *PredicatesArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredicatesArgs.Marshal(b, m, deterministic)
}
func (dst *PredicatesArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredicatesArgs.Merge(dst, src)
}
func (m *PredicatesArgs) XXX_Size() int {
	return xxx_messageInfo_PredicatesArgs.Size(m)
}
func (m *PredicatesArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PredicatesArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PredicatesArgs proto.InternalMessageInfo

func (m *PredicatesArgs) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *PredicatesArgs) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *PredicatesArgs) GetAllocate() bool {
	if m != nil {
		return m.Allocate
	}
	return false
}

type PreemptionPredicatesArgs struct {
	// the allocation key of the container to check
	AllocationKey string `protobuf:"bytes,1,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// the node ID the container should be attempted to be scheduled on
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// a list of existing allocations that should be tentatively removed before checking
	PreemptAllocationKeys []string `protobuf:"bytes,3,rep,name=preemptAllocationKeys,proto3" json:"preemptAllocationKeys,omitempty"`
	// index of last allocation in starting attempt (first attempt should be 0..startIndex)
	StartIndex           int32    `protobuf:"varint,4,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreemptionPredicatesArgs) Reset()         { *m = PreemptionPredicatesArgs{} }
func (m *PreemptionPredicatesArgs) String() string { return proto.CompactTextString(m) }
func (*PreemptionPredicatesArgs) ProtoMessage()    {}
func (*PreemptionPredicatesArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{27}
}
func (m *PreemptionPredicatesArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreemptionPredicatesArgs.Unmarshal(m, b)
}
func (m *PreemptionPredicatesArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreemptionPredicatesArgs.Marshal(b, m, deterministic)
}
func (dst *PreemptionPredicatesArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptionPredicatesArgs.Merge(dst, src)
}
func (m *PreemptionPredicatesArgs) XXX_Size() int {
	return xxx_messageInfo_PreemptionPredicatesArgs.Size(m)
}
func (m *PreemptionPredicatesArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptionPredicatesArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptionPredicatesArgs proto.InternalMessageInfo

func (m *PreemptionPredicatesArgs) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *PreemptionPredicatesArgs) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *PreemptionPredicatesArgs) GetPreemptAllocationKeys() []string {
	if m != nil {
		return m.PreemptAllocationKeys
	}
	return nil
}

func (m *PreemptionPredicatesArgs) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

type PreemptionPredicatesResponse struct {
	// whether or not container will schedule on the node
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// index of last allocation which was removed before success (ignored during failure)
	Index                int32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreemptionPredicatesResponse) Reset()         { *m = PreemptionPredicatesResponse{} }
func (m *PreemptionPredicatesResponse) String() string { return proto.CompactTextString(m) }
func (*PreemptionPredicatesResponse) ProtoMessage()    {}
func (*PreemptionPredicatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{28}
}
func (m *PreemptionPredicatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreemptionPredicatesResponse.Unmarshal(m, b)
}
func (m *PreemptionPredicatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreemptionPredicatesResponse.Marshal(b, m, deterministic)
}
func (dst *PreemptionPredicatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptionPredicatesResponse.Merge(dst, src)
}
func (m *PreemptionPredicatesResponse) XXX_Size() int {
	return xxx_messageInfo_PreemptionPredicatesResponse.Size(m)
}
func (m *PreemptionPredicatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptionPredicatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptionPredicatesResponse proto.InternalMessageInfo

func (m *PreemptionPredicatesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PreemptionPredicatesResponse) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type UpdateContainerSchedulingStateRequest struct {
	// application ID
	ApplicartionID string `protobuf:"bytes,1,opt,name=applicartionID,proto3" json:"applicartionID,omitempty"`
	// allocation key used to identify a container.
	AllocationKey string `protobuf:"bytes,2,opt,name=allocationKey,proto3" json:"allocationKey,omitempty"`
	// container scheduling state
	State UpdateContainerSchedulingStateRequest_SchedulingState `protobuf:"varint,3,opt,name=state,proto3,enum=si.v1.UpdateContainerSchedulingStateRequest_SchedulingState" json:"state,omitempty"`
	// an optional plain message to explain why it is in such state
	Reason               string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateContainerSchedulingStateRequest) Reset()         { *m = UpdateContainerSchedulingStateRequest{} }
func (m *UpdateContainerSchedulingStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateContainerSchedulingStateRequest) ProtoMessage()    {}
func (*UpdateContainerSchedulingStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{29}
}
func (m *UpdateContainerSchedulingStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateContainerSchedulingStateRequest.Unmarshal(m, b)
}
func (m *UpdateContainerSchedulingStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateContainerSchedulingStateRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateContainerSchedulingStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainerSchedulingStateRequest.Merge(dst, src)
}
func (m *UpdateContainerSchedulingStateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateContainerSchedulingStateRequest.Size(m)
}
func (m *UpdateContainerSchedulingStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainerSchedulingStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainerSchedulingStateRequest proto.InternalMessageInfo

func (m *UpdateContainerSchedulingStateRequest) GetApplicartionID() string {
	if m != nil {
		return m.ApplicartionID
	}
	return ""
}

func (m *UpdateContainerSchedulingStateRequest) GetAllocationKey() string {
	if m != nil {
		return m.AllocationKey
	}
	return ""
}

func (m *UpdateContainerSchedulingStateRequest) GetState() UpdateContainerSchedulingStateRequest_SchedulingState {
	if m != nil {
		return m.State
	}
	return UpdateContainerSchedulingStateRequest_UNKNOWN_SCHEDULING_STATE
}

func (m *UpdateContainerSchedulingStateRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateConfigurationRequest struct {
	// RM ID to update
	RmID string `protobuf:"bytes,2,opt,name=rmID,proto3" json:"rmID,omitempty"`
	// PolicyGroup to update
	PolicyGroup string `protobuf:"bytes,3,opt,name=policyGroup,proto3" json:"policyGroup,omitempty"`
	// New configuration to update
	Config string `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Additional configuration key/value pairs for configuration not related to the policyGroup.
	ExtraConfig          map[string]string `protobuf:"bytes,5,rep,name=extraConfig,proto3" json:"extraConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateConfigurationRequest) Reset()         { *m = UpdateConfigurationRequest{} }
func (m *UpdateConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateConfigurationRequest) ProtoMessage()    {}
func (*UpdateConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{30}
}
func (m *UpdateConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateConfigurationRequest.Unmarshal(m, b)
}
func (m *UpdateConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateConfigurationRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateConfigurationRequest.Merge(dst, src)
}
func (m *UpdateConfigurationRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateConfigurationRequest.Size(m)
}
func (m *UpdateConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateConfigurationRequest proto.InternalMessageInfo

func (m *UpdateConfigurationRequest) GetRmID() string {
	if m != nil {
		return m.RmID
	}
	return ""
}

func (m *UpdateConfigurationRequest) GetPolicyGroup() string {
	if m != nil {
		return m.PolicyGroup
	}
	return ""
}

func (m *UpdateConfigurationRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *UpdateConfigurationRequest) GetExtraConfig() map[string]string {
	if m != nil {
		return m.ExtraConfig
	}
	return nil
}

type EventRecord struct {
	// the type of the object associated with the event
	Type EventRecord_Type `protobuf:"varint,1,opt,name=type,proto3,enum=si.v1.EventRecord_Type" json:"type,omitempty"`
	// ID of the object associated with the event
	ObjectID string `protobuf:"bytes,2,opt,name=objectID,proto3" json:"objectID,omitempty"`
	// the detailed message as string
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// timestamp of the event
	TimestampNano int64 `protobuf:"varint,6,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	// the type of the change
	EventChangeType      EventRecord_ChangeType `protobuf:"varint,7,opt,name=eventChangeType,proto3,enum=si.v1.EventRecord_ChangeType" json:"eventChangeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EventRecord) Reset()         { *m = EventRecord{} }
func (m *EventRecord) String() string { return proto.CompactTextString(m) }
func (*EventRecord) ProtoMessage()    {}
func (*EventRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_si_05e8f7c1c0594b5d, []int{31}
}
func (m *EventRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRecord.Unmarshal(m, b)
}
func (m *EventRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRecord.Marshal(b, m, deterministic)
}
func (dst *EventRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecord.Merge(dst, src)
}
func (m *EventRecord) XXX_Size() int {
	return xxx_messageInfo_EventRecord.Size(m)
}
func (m *EventRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecord proto.InternalMessageInfo

func (m *EventRecord) GetType() EventRecord_Type {
	if m != nil {
		return m.Type
	}
	return EventRecord_UNKNOWN_EVENTRECORD_TYPE
}

func (m *EventRecord) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

func (m *EventRecord) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventRecord) GetTimestampNano() int64 {
	if m != nil {
		return m.TimestampNano
	}
	return 0
}

func (m *EventRecord) GetEventChangeType() EventRecord_ChangeType {
	if m != nil {
		return m.EventChangeType
	}
	return EventRecord_NONE
}

var E_SiSecret = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1059,
	Name:          "si.v1.si_secret",
	Tag:           "varint,1059,opt,name=si_secret,json=siSecret",
	Filename:      "yunikorn-scheduler-interface/si.proto",
}

func init() {
	proto.RegisterType((*RegisterResourceManagerRequest)(nil), "si.v1.RegisterResourceManagerRequest")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.RegisterResourceManagerRequest.BuildInfoEntry")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.RegisterResourceManagerRequest.ExtraConfigEntry")
	proto.RegisterType((*RegisterResourceManagerResponse)(nil), "si.v1.RegisterResourceManagerResponse")
	proto.RegisterType((*AllocationRequest)(nil), "si.v1.AllocationRequest")
	proto.RegisterType((*ApplicationRequest)(nil), "si.v1.ApplicationRequest")
	proto.RegisterType((*NodeRequest)(nil), "si.v1.NodeRequest")
	proto.RegisterType((*AllocationResponse)(nil), "si.v1.AllocationResponse")
	proto.RegisterType((*ApplicationResponse)(nil), "si.v1.ApplicationResponse")
	proto.RegisterType((*NodeResponse)(nil), "si.v1.NodeResponse")
	proto.RegisterType((*UpdatedApplication)(nil), "si.v1.UpdatedApplication")
	proto.RegisterType((*RejectedApplication)(nil), "si.v1.RejectedApplication")
	proto.RegisterType((*AcceptedApplication)(nil), "si.v1.AcceptedApplication")
	proto.RegisterType((*RejectedNode)(nil), "si.v1.RejectedNode")
	proto.RegisterType((*AcceptedNode)(nil), "si.v1.AcceptedNode")
	proto.RegisterType((*Resource)(nil), "si.v1.Resource")
	proto.RegisterMapType((map[string]*Quantity)(nil), "si.v1.Resource.ResourcesEntry")
	proto.RegisterType((*Quantity)(nil), "si.v1.Quantity")
	proto.RegisterType((*AllocationAsk)(nil), "si.v1.AllocationAsk")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.AllocationAsk.TagsEntry")
	proto.RegisterType((*PreemptionPolicy)(nil), "si.v1.PreemptionPolicy")
	proto.RegisterType((*AddApplicationRequest)(nil), "si.v1.AddApplicationRequest")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.AddApplicationRequest.TagsEntry")
	proto.RegisterType((*RemoveApplicationRequest)(nil), "si.v1.RemoveApplicationRequest")
	proto.RegisterType((*UserGroupInformation)(nil), "si.v1.UserGroupInformation")
	proto.RegisterType((*Allocation)(nil), "si.v1.Allocation")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.Allocation.AllocationTagsEntry")
	proto.RegisterType((*AllocationReleasesRequest)(nil), "si.v1.AllocationReleasesRequest")
	proto.RegisterType((*AllocationRelease)(nil), "si.v1.AllocationRelease")
	proto.RegisterType((*AllocationAskRelease)(nil), "si.v1.AllocationAskRelease")
	proto.RegisterType((*NodeInfo)(nil), "si.v1.NodeInfo")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.NodeInfo.AttributesEntry")
	proto.RegisterType((*RejectedAllocationAsk)(nil), "si.v1.RejectedAllocationAsk")
	proto.RegisterType((*PredicatesArgs)(nil), "si.v1.PredicatesArgs")
	proto.RegisterType((*PreemptionPredicatesArgs)(nil), "si.v1.PreemptionPredicatesArgs")
	proto.RegisterType((*PreemptionPredicatesResponse)(nil), "si.v1.PreemptionPredicatesResponse")
	proto.RegisterType((*UpdateContainerSchedulingStateRequest)(nil), "si.v1.UpdateContainerSchedulingStateRequest")
	proto.RegisterType((*UpdateConfigurationRequest)(nil), "si.v1.UpdateConfigurationRequest")
	proto.RegisterMapType((map[string]string)(nil), "si.v1.UpdateConfigurationRequest.ExtraConfigEntry")
	proto.RegisterType((*EventRecord)(nil), "si.v1.EventRecord")
	proto.RegisterEnum("si.v1.TerminationType", TerminationType_name, TerminationType_value)
	proto.RegisterEnum("si.v1.NodeInfo_ActionFromRM", NodeInfo_ActionFromRM_name, NodeInfo_ActionFromRM_value)
	proto.RegisterEnum("si.v1.UpdateContainerSchedulingStateRequest_SchedulingState", UpdateContainerSchedulingStateRequest_SchedulingState_name, UpdateContainerSchedulingStateRequest_SchedulingState_value)
	proto.RegisterEnum("si.v1.EventRecord_Type", EventRecord_Type_name, EventRecord_Type_value)
	proto.RegisterEnum("si.v1.EventRecord_ChangeType", EventRecord_ChangeType_name, EventRecord_ChangeType_value)
	proto.RegisterExtension(E_SiSecret)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	// Register a RM, if it is a reconnect from previous RM the call will
	// trigger a cleanup of all in-memory data and resync with RM.
	RegisterResourceManager(ctx context.Context, in *RegisterResourceManagerRequest, opts ...grpc.CallOption) (*RegisterResourceManagerResponse, error)
	// Update Scheduler status (this includes node status update, allocation request
	// updates, etc. And receive updates from scheduler for allocation changes,
	// any required status changes, etc.
	// Update allocation request
	UpdateAllocation(ctx context.Context, opts ...grpc.CallOption) (Scheduler_UpdateAllocationClient, error)
	// Update application request
	UpdateApplication(ctx context.Context, opts ...grpc.CallOption) (Scheduler_UpdateApplicationClient, error)
	// Update node info
	UpdateNode(ctx context.Context, opts ...grpc.CallOption) (Scheduler_UpdateNodeClient, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) RegisterResourceManager(ctx context.Context, in *RegisterResourceManagerRequest, opts ...grpc.CallOption) (*RegisterResourceManagerResponse, error) {
	out := new(RegisterResourceManagerResponse)
	err := c.cc.Invoke(ctx, "/si.v1.Scheduler/RegisterResourceManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateAllocation(ctx context.Context, opts ...grpc.CallOption) (Scheduler_UpdateAllocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[0], "/si.v1.Scheduler/UpdateAllocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerUpdateAllocationClient{stream}
	return x, nil
}

type Scheduler_UpdateAllocationClient interface {
	Send(*AllocationRequest) error
	Recv() (*AllocationResponse, error)
	grpc.ClientStream
}

type schedulerUpdateAllocationClient struct {
	grpc.ClientStream
}

func (x *schedulerUpdateAllocationClient) Send(m *AllocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerUpdateAllocationClient) Recv() (*AllocationResponse, error) {
	m := new(AllocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) UpdateApplication(ctx context.Context, opts ...grpc.CallOption) (Scheduler_UpdateApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[1], "/si.v1.Scheduler/UpdateApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerUpdateApplicationClient{stream}
	return x, nil
}

type Scheduler_UpdateApplicationClient interface {
	Send(*ApplicationRequest) error
	Recv() (*ApplicationResponse, error)
	grpc.ClientStream
}

type schedulerUpdateApplicationClient struct {
	grpc.ClientStream
}

func (x *schedulerUpdateApplicationClient) Send(m *ApplicationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerUpdateApplicationClient) Recv() (*ApplicationResponse, error) {
	m := new(ApplicationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) UpdateNode(ctx context.Context, opts ...grpc.CallOption) (Scheduler_UpdateNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[2], "/si.v1.Scheduler/UpdateNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerUpdateNodeClient{stream}
	return x, nil
}

type Scheduler_UpdateNodeClient interface {
	Send(*NodeRequest) error
	Recv() (*NodeResponse, error)
	grpc.ClientStream
}

type schedulerUpdateNodeClient struct {
	grpc.ClientStream
}

func (x *schedulerUpdateNodeClient) Send(m *NodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerUpdateNodeClient) Recv() (*NodeResponse, error) {
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	// Register a RM, if it is a reconnect from previous RM the call will
	// trigger a cleanup of all in-memory data and resync with RM.
	RegisterResourceManager(context.Context, *RegisterResourceManagerRequest) (*RegisterResourceManagerResponse, error)
	// Update Scheduler status (this includes node status update, allocation request
	// updates, etc. And receive updates from scheduler for allocation changes,
	// any required status changes, etc.
	// Update allocation request
	UpdateAllocation(Scheduler_UpdateAllocationServer) error
	// Update application request
	UpdateApplication(Scheduler_UpdateApplicationServer) error
	// Update node info
	UpdateNode(Scheduler_UpdateNodeServer) error
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_RegisterResourceManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RegisterResourceManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/si.v1.Scheduler/RegisterResourceManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RegisterResourceManager(ctx, req.(*RegisterResourceManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateAllocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).UpdateAllocation(&schedulerUpdateAllocationServer{stream})
}

type Scheduler_UpdateAllocationServer interface {
	Send(*AllocationResponse) error
	Recv() (*AllocationRequest, error)
	grpc.ServerStream
}

type schedulerUpdateAllocationServer struct {
	grpc.ServerStream
}

func (x *schedulerUpdateAllocationServer) Send(m *AllocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerUpdateAllocationServer) Recv() (*AllocationRequest, error) {
	m := new(AllocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scheduler_UpdateApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).UpdateApplication(&schedulerUpdateApplicationServer{stream})
}

type Scheduler_UpdateApplicationServer interface {
	Send(*ApplicationResponse) error
	Recv() (*ApplicationRequest, error)
	grpc.ServerStream
}

type schedulerUpdateApplicationServer struct {
	grpc.ServerStream
}

func (x *schedulerUpdateApplicationServer) Send(m *ApplicationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerUpdateApplicationServer) Recv() (*ApplicationRequest, error) {
	m := new(ApplicationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scheduler_UpdateNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).UpdateNode(&schedulerUpdateNodeServer{stream})
}

type Scheduler_UpdateNodeServer interface {
	Send(*NodeResponse) error
	Recv() (*NodeRequest, error)
	grpc.ServerStream
}

type schedulerUpdateNodeServer struct {
	grpc.ServerStream
}

func (x *schedulerUpdateNodeServer) Send(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerUpdateNodeServer) Recv() (*NodeRequest, error) {
	m := new(NodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "si.v1.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterResourceManager",
			Handler:    _Scheduler_RegisterResourceManager_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateAllocation",
			Handler:       _Scheduler_UpdateAllocation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateApplication",
			Handler:       _Scheduler_UpdateApplication_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateNode",
			Handler:       _Scheduler_UpdateNode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yunikorn-scheduler-interface/si.proto",
}

func init() {
	proto.RegisterFile("yunikorn-scheduler-interface/si.proto", fileDescriptor_si_05e8f7c1c0594b5d)
}

var fileDescriptor_si_05e8f7c1c0594b5d = []byte{
	// 2296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x3b, 0x93, 0xdb, 0xc8,
	0xf1, 0x3f, 0x10, 0xe0, 0xab, 0xb9, 0xda, 0x85, 0x66, 0x57, 0x12, 0xc4, 0xff, 0x9e, 0xb4, 0x7f,
	0xf8, 0x56, 0xa5, 0x3a, 0x5b, 0xdc, 0xbb, 0x3d, 0xd5, 0xe9, 0x4a, 0x92, 0xef, 0xcc, 0x25, 0x21,
	0x89, 0x92, 0xf8, 0xd0, 0x90, 0x94, 0x7d, 0x4e, 0xb6, 0xb0, 0xe4, 0x2c, 0x05, 0x2d, 0x09, 0xf0,
	0x30, 0xa0, 0x4e, 0x5b, 0x2e, 0x47, 0x2e, 0xc7, 0x57, 0x8e, 0x9c, 0x38, 0x73, 0x95, 0x43, 0x47,
	0x8e, 0x1c, 0x39, 0xf4, 0x07, 0xb0, 0xfd, 0x09, 0x1c, 0x39, 0x70, 0xe6, 0xdc, 0x35, 0x83, 0xc1,
	0x8b, 0x00, 0x25, 0xca, 0x96, 0x33, 0x4c, 0xcf, 0xaf, 0x7b, 0x7a, 0xba, 0x7b, 0xba, 0x7b, 0x06,
	0xb0, 0x7f, 0xbe, 0xb0, 0xad, 0x33, 0xc7, 0xb5, 0x6f, 0xd1, 0xd1, 0x0b, 0x32, 0x5e, 0x4c, 0x89,
	0x7b, 0xcb, 0xb2, 0x3d, 0xe2, 0x9e, 0x9a, 0x23, 0x72, 0x40, 0xad, 0xda, 0xdc, 0x75, 0x3c, 0x07,
	0xe5, 0xa9, 0x55, 0x7b, 0xf5, 0x69, 0x75, 0x6f, 0xe2, 0x38, 0x93, 0x29, 0x39, 0xe0, 0xc4, 0x93,
	0xc5, 0xe9, 0xc1, 0x98, 0xd0, 0x91, 0x6b, 0xcd, 0x3d, 0xc7, 0xf5, 0x81, 0xfa, 0x1f, 0x64, 0xb8,
	0x86, 0xc9, 0xc4, 0xa2, 0x1e, 0x71, 0x31, 0xa1, 0xce, 0xc2, 0x1d, 0x91, 0xb6, 0x69, 0x9b, 0x13,
	0x36, 0xfc, 0x66, 0x41, 0xa8, 0x87, 0x10, 0x28, 0xee, 0xac, 0xd5, 0xd4, 0xa4, 0x3d, 0xe9, 0x66,
	0x19, 0xf3, 0x6f, 0xa4, 0x41, 0xf1, 0x15, 0x71, 0xa9, 0xe5, 0xd8, 0x5a, 0x8e, 0x93, 0x83, 0x21,
	0xda, 0x83, 0xca, 0xdc, 0x99, 0x5a, 0xa3, 0xf3, 0x87, 0xae, 0xb3, 0x98, 0x6b, 0x32, 0x9f, 0x8d,
	0x93, 0x10, 0x86, 0xf2, 0xc9, 0xc2, 0x9a, 0x8e, 0x5b, 0xf6, 0xa9, 0xa3, 0x29, 0x7b, 0xf2, 0xcd,
	0xca, 0xe1, 0xed, 0x1a, 0xd7, 0xb7, 0xf6, 0x66, 0x4d, 0x6a, 0x47, 0x01, 0x9b, 0x61, 0x7b, 0xee,
	0x39, 0x8e, 0xc4, 0xa0, 0xcb, 0x50, 0x18, 0x39, 0xf6, 0xa9, 0x35, 0xd1, 0xf2, 0x7c, 0x41, 0x31,
	0x42, 0x3f, 0x81, 0x0a, 0x79, 0xed, 0xb9, 0x66, 0xc3, 0x9f, 0x2c, 0xf0, 0xd5, 0x3e, 0x5f, 0x6f,
	0x35, 0x23, 0x62, 0xf4, 0xd7, 0x8b, 0x8b, 0xaa, 0xde, 0x87, 0xcd, 0xa4, 0x3a, 0x48, 0x05, 0xf9,
	0x8c, 0x9c, 0x0b, 0x33, 0xb1, 0x4f, 0xb4, 0x03, 0xf9, 0x57, 0xe6, 0x74, 0x41, 0x84, 0x8d, 0xfc,
	0xc1, 0xdd, 0xdc, 0x17, 0x52, 0xf5, 0x4b, 0x50, 0x97, 0xc5, 0xbf, 0x0b, 0xbf, 0xfe, 0xff, 0x70,
	0x7d, 0xa5, 0xf6, 0x74, 0xee, 0xd8, 0x94, 0xe8, 0xdf, 0x49, 0x70, 0xb1, 0x3e, 0x9d, 0x3a, 0x23,
	0xd3, 0xb3, 0x1c, 0x3b, 0x70, 0xe6, 0x4d, 0x50, 0x4c, 0x7a, 0x46, 0x35, 0x89, 0x5b, 0x62, 0x47,
	0x58, 0x22, 0xc2, 0xd5, 0xe9, 0x19, 0xe6, 0x08, 0x74, 0x1f, 0x4a, 0x2e, 0x99, 0x12, 0x93, 0x12,
	0xca, 0xd7, 0xaf, 0x1c, 0xee, 0xa5, 0xd0, 0x58, 0x00, 0x84, 0x74, 0x1c, 0x72, 0x84, 0x41, 0x23,
	0x47, 0x41, 0xa3, 0xff, 0x4a, 0x02, 0x54, 0x9f, 0xcf, 0xa7, 0x56, 0x52, 0xa5, 0x1a, 0xc8, 0x36,
	0xf9, 0x56, 0x68, 0xb4, 0x1b, 0xac, 0x31, 0x1e, 0xa7, 0xa1, 0x98, 0x01, 0xd1, 0x1d, 0x28, 0xb8,
	0x64, 0xe6, 0xbc, 0x62, 0x66, 0x61, 0x2c, 0xd7, 0x43, 0x77, 0x32, 0x62, 0x06, 0x97, 0x80, 0x67,
	0xea, 0xf4, 0x08, 0x2a, 0x1d, 0x67, 0x4c, 0x02, 0x5d, 0xf6, 0x21, 0x6f, 0x3b, 0x63, 0x12, 0xd8,
	0x67, 0x4b, 0x88, 0x66, 0x10, 0xe6, 0x68, 0xec, 0xcf, 0x86, 0x92, 0x72, 0x31, 0x49, 0xff, 0x60,
	0xbb, 0x8b, 0x59, 0xc6, 0x77, 0x03, 0xfa, 0x5e, 0x7c, 0x77, 0x17, 0xd3, 0x16, 0xe4, 0x5b, 0xba,
	0x1d, 0xda, 0x7a, 0x2c, 0x36, 0xa5, 0xad, 0xb2, 0x75, 0x68, 0xe3, 0x31, 0xfa, 0x0a, 0x36, 0x82,
	0xef, 0x3a, 0xf3, 0xa9, 0xcc, 0x39, 0xff, 0x2f, 0xd3, 0xa7, 0x82, 0x39, 0xc1, 0x80, 0xbe, 0x60,
	0xcb, 0xbe, 0x24, 0x23, 0x8f, 0x8c, 0xc5, 0x41, 0xdc, 0x0d, 0x6d, 0xe9, 0x93, 0x93, 0x42, 0x42,
	0xb4, 0xfe, 0x47, 0x09, 0xb6, 0x13, 0x96, 0x16, 0xbb, 0xfd, 0x3c, 0x26, 0xd1, 0xdf, 0x72, 0x75,
	0x59, 0x62, 0x8c, 0x2b, 0xc4, 0x32, 0x3e, 0x73, 0x34, 0x22, 0x73, 0x2f, 0x34, 0x40, 0xc0, 0x57,
	0x17, 0xe4, 0x04, 0x5f, 0x80, 0x45, 0x9f, 0x41, 0x71, 0x31, 0x1f, 0x9b, 0x8c, 0xcd, 0xdf, 0xfd,
	0x55, 0xc1, 0x36, 0xf4, 0xa9, 0x71, 0xae, 0x00, 0xa9, 0xcf, 0x61, 0xc3, 0xf7, 0xb9, 0x50, 0xfa,
	0x20, 0xa5, 0xf4, 0xf6, 0x92, 0xd2, 0x1c, 0x1e, 0x69, 0x7b, 0x90, 0xd2, 0x76, 0x7b, 0x49, 0x5b,
	0x9f, 0x21, 0x00, 0xe9, 0xbf, 0x93, 0x00, 0xa5, 0x35, 0x42, 0x1f, 0xc1, 0x05, 0x33, 0x1a, 0x86,
	0x29, 0x36, 0x49, 0x64, 0x59, 0x80, 0x7a, 0xa6, 0x17, 0x66, 0x01, 0x3e, 0x40, 0x77, 0x41, 0xe3,
	0x1f, 0x03, 0xd7, 0xb4, 0xa9, 0xc5, 0xa0, 0x03, 0x6b, 0x46, 0xa8, 0x67, 0xce, 0xfc, 0xa4, 0x2b,
	0xe3, 0x95, 0xf3, 0x2c, 0x7b, 0xcf, 0x08, 0xa5, 0xe6, 0x84, 0x68, 0x8a, 0x9f, 0xbd, 0xc5, 0x50,
	0xef, 0xc3, 0x76, 0x86, 0xa3, 0xd6, 0x54, 0xf4, 0x32, 0x3b, 0x98, 0x26, 0x0d, 0x6b, 0x82, 0x18,
	0xe9, 0xf7, 0x60, 0x3b, 0xc3, 0x8b, 0xeb, 0x09, 0xd5, 0xbf, 0x84, 0x8d, 0xb8, 0x17, 0xd8, 0x22,
	0xec, 0x0c, 0x86, 0x70, 0x31, 0x5a, 0xb9, 0xf8, 0x0d, 0xd8, 0x88, 0x3b, 0x65, 0x15, 0xbf, 0xfe,
	0x6b, 0x09, 0x4a, 0x41, 0x2a, 0x45, 0xf7, 0xa1, 0xec, 0x8a, 0xef, 0x20, 0x15, 0x5c, 0x0b, 0x43,
	0xc2, 0xa7, 0x87, 0x1f, 0x54, 0x14, 0xa3, 0x90, 0xa1, 0xda, 0x86, 0xcd, 0xe4, 0x64, 0x46, 0x6a,
	0xdf, 0x8f, 0xa7, 0xf6, 0x28, 0xd1, 0x3c, 0x5b, 0x98, 0xb6, 0x67, 0x79, 0xe7, 0xf1, 0x5c, 0xbf,
	0x07, 0xa5, 0x80, 0x1c, 0x55, 0x04, 0x89, 0xbb, 0xd8, 0x1f, 0xe8, 0x7f, 0x53, 0xe0, 0x42, 0xe2,
	0xa4, 0x72, 0xdb, 0x86, 0x84, 0x27, 0xe1, 0xd2, 0x49, 0x62, 0xda, 0x03, 0xb9, 0x2c, 0xb7, 0x7e,
	0x04, 0x17, 0xe6, 0xa6, 0xeb, 0xf1, 0x18, 0xea, 0x98, 0x33, 0x22, 0xf2, 0x67, 0x92, 0x88, 0x3e,
	0x85, 0x4a, 0x60, 0x81, 0x3a, 0x3d, 0xe3, 0x71, 0x15, 0x6d, 0x2b, 0x30, 0x07, 0x8e, 0x63, 0xd0,
	0x0d, 0xd8, 0x9c, 0x99, 0xaf, 0x23, 0xc5, 0x29, 0x2f, 0xde, 0x79, 0xbc, 0x44, 0x45, 0x55, 0x28,
	0xcd, 0x5d, 0xcb, 0x71, 0x2d, 0xef, 0x5c, 0x2b, 0x70, 0x44, 0x38, 0x46, 0x47, 0xb0, 0x4b, 0x5e,
	0x93, 0xd1, 0x22, 0x08, 0x70, 0x67, 0xe1, 0xb5, 0xad, 0xe9, 0xd4, 0xea, 0x93, 0x91, 0x63, 0x8f,
	0xa9, 0x56, 0xe4, 0x76, 0x7a, 0x23, 0x06, 0x1d, 0x82, 0xe2, 0x99, 0x13, 0xaa, 0x95, 0x12, 0x8e,
	0x4e, 0x18, 0xb4, 0x36, 0x30, 0x27, 0xc2, 0xd1, 0x1c, 0xcb, 0x8c, 0xe2, 0x99, 0xf4, 0x8c, 0x77,
	0x34, 0xdc, 0x28, 0x65, 0xdf, 0x28, 0x09, 0x22, 0x6f, 0x86, 0xa6, 0xe6, 0x88, 0xbc, 0x70, 0xa6,
	0x63, 0xe2, 0x6a, 0xb0, 0x27, 0xdd, 0x2c, 0xe1, 0x38, 0x09, 0x5d, 0x03, 0xe8, 0xba, 0xd6, 0xc4,
	0xb2, 0x4d, 0xcf, 0x71, 0xb5, 0x0a, 0x07, 0xc4, 0x28, 0xa8, 0x01, 0xea, 0xdc, 0x25, 0x64, 0x36,
	0x67, 0x8a, 0xf4, 0x78, 0x17, 0xa5, 0x6d, 0x70, 0xdb, 0x5e, 0x11, 0x7a, 0xf6, 0x96, 0xa6, 0x71,
	0x8a, 0xa1, 0x7a, 0x07, 0xca, 0xa1, 0xfe, 0xef, 0xd4, 0x66, 0x4c, 0x41, 0x5d, 0x16, 0x8f, 0x3e,
	0x06, 0x95, 0x45, 0xd1, 0xb7, 0x62, 0xa2, 0x4f, 0xa6, 0xa7, 0x5c, 0x58, 0x09, 0xa7, 0xe8, 0xe8,
	0x07, 0x70, 0x31, 0x4e, 0xeb, 0x7a, 0x2f, 0x88, 0xcb, 0x57, 0x29, 0xe1, 0xf4, 0x84, 0xfe, 0x17,
	0x19, 0x2e, 0x65, 0xd6, 0xfd, 0x35, 0xf3, 0xcf, 0x2e, 0x94, 0xbf, 0x59, 0x90, 0x05, 0xe1, 0xfe,
	0xf0, 0xf7, 0x12, 0x11, 0xd6, 0x0c, 0xe3, 0x5b, 0x20, 0x2f, 0x26, 0x96, 0x08, 0xdf, 0xa0, 0x94,
	0x0e, 0x29, 0x71, 0xb9, 0x53, 0x59, 0x0f, 0xe0, 0xce, 0x44, 0xe1, 0x5e, 0x4c, 0x2c, 0x74, 0x57,
	0x84, 0x4e, 0x9e, 0x87, 0xce, 0x8d, 0x37, 0x35, 0x2f, 0xa9, 0x10, 0x7a, 0x5b, 0xe8, 0x16, 0xd6,
	0x08, 0xdd, 0x3b, 0xb0, 0x19, 0x8b, 0x26, 0x76, 0xf0, 0x8a, 0xd9, 0x07, 0x6f, 0x09, 0x86, 0x3e,
	0x81, 0xed, 0x89, 0x69, 0x4f, 0xfa, 0xfe, 0x25, 0xc2, 0xb2, 0x27, 0x7d, 0xef, 0x7c, 0x4a, 0xb4,
	0x12, 0xb7, 0x49, 0xd6, 0xd4, 0x7f, 0x1e, 0x44, 0xa7, 0xa0, 0xad, 0x6a, 0xcd, 0xd6, 0x74, 0x6c,
	0xca, 0x75, 0xb9, 0x0c, 0xd7, 0xe9, 0x47, 0xb0, 0x93, 0xe5, 0x28, 0xd6, 0xac, 0x2d, 0x28, 0x71,
	0x83, 0xfb, 0x0b, 0xfb, 0x66, 0x55, 0x60, 0xc2, 0x70, 0x94, 0xd7, 0xef, 0x32, 0x16, 0x23, 0xfd,
	0x9f, 0x32, 0x40, 0x74, 0xf0, 0xd7, 0x4c, 0xa3, 0x6d, 0xd8, 0x8c, 0x08, 0xcc, 0x46, 0xa2, 0x29,
	0xd8, 0x4f, 0x65, 0x92, 0xd8, 0x67, 0x14, 0x0d, 0x4b, 0xcc, 0x4c, 0xdf, 0xe1, 0x30, 0x6a, 0x53,
	0xd9, 0x37, 0xba, 0x07, 0x6a, 0x90, 0x39, 0x7b, 0xc4, 0xe5, 0x52, 0x78, 0xb2, 0xcc, 0xf0, 0x74,
	0x0a, 0xf8, 0xc6, 0xfc, 0x19, 0x95, 0xc3, 0x52, 0xa2, 0x9c, 0xa6, 0x1c, 0x53, 0x5e, 0xcb, 0x31,
	0x90, 0x75, 0xa6, 0x52, 0xb9, 0xb2, 0xb2, 0x46, 0xae, 0xdc, 0x48, 0xe5, 0xca, 0x6a, 0x1d, 0xb6,
	0x33, 0xec, 0xf7, 0x2e, 0xb1, 0xf8, 0x58, 0x29, 0x15, 0xd5, 0x52, 0x2c, 0x2b, 0xe8, 0x7f, 0x92,
	0xe0, 0xea, 0xca, 0xfb, 0x0c, 0x7a, 0x0a, 0x3b, 0x91, 0x73, 0xe8, 0xc0, 0x11, 0xf3, 0xa2, 0x25,
	0x58, 0xdd, 0xa3, 0x67, 0x72, 0xa1, 0x21, 0x5c, 0x31, 0xe3, 0x45, 0x25, 0x26, 0x30, 0xf7, 0xf6,
	0xd6, 0x7d, 0x15, 0xaf, 0xfe, 0xaf, 0xa5, 0x8b, 0x9e, 0xbf, 0x58, 0xca, 0x35, 0xd2, 0x0a, 0xd7,
	0xac, 0xd1, 0x01, 0x64, 0x45, 0xe4, 0x8f, 0x60, 0xcb, 0x23, 0xee, 0x8c, 0x95, 0x29, 0xe6, 0x8d,
	0xf3, 0xb9, 0xdf, 0x4b, 0x6e, 0x1e, 0x5e, 0x16, 0x9b, 0x18, 0x24, 0x67, 0xf1, 0x32, 0x3c, 0xde,
	0x85, 0xe6, 0x13, 0x5d, 0x68, 0xfa, 0xd8, 0x15, 0x32, 0x8e, 0x9d, 0xfe, 0x77, 0x09, 0x76, 0xb2,
	0x2c, 0xf5, 0x5e, 0xb7, 0x9e, 0x52, 0x45, 0xce, 0xca, 0x00, 0xff, 0x43, 0x63, 0xe8, 0xbf, 0x51,
	0xa0, 0x14, 0xdc, 0x3f, 0x57, 0x76, 0xbf, 0xb7, 0xa1, 0x60, 0x8e, 0xbc, 0xe0, 0x39, 0x66, 0x33,
	0xbc, 0xc7, 0x05, 0x8c, 0xb5, 0x3a, 0x9f, 0x7d, 0xe0, 0x3a, 0x33, 0xdc, 0xc6, 0x02, 0x8b, 0xbe,
	0x02, 0x30, 0x3d, 0xcf, 0xb5, 0x4e, 0x16, 0x1e, 0x09, 0xae, 0x8f, 0xd7, 0x53, 0x9c, 0x21, 0xc2,
	0x4f, 0x57, 0x31, 0x16, 0x54, 0x87, 0x6d, 0xf1, 0x0c, 0x65, 0x9e, 0x4c, 0x49, 0x90, 0x82, 0x56,
	0x35, 0x7f, 0x59, 0x58, 0x96, 0xd9, 0x9c, 0xd1, 0x68, 0x31, 0xb7, 0xc8, 0x38, 0xe4, 0x5f, 0x95,
	0xd9, 0x96, 0x81, 0xa8, 0x01, 0xdb, 0xe4, 0xb5, 0x45, 0x3d, 0xcb, 0x9e, 0xc4, 0xdb, 0xc8, 0xc2,
	0xaa, 0xcb, 0x76, 0x16, 0xba, 0xfa, 0x43, 0xd8, 0x5a, 0xda, 0xe3, 0x3b, 0x95, 0xb7, 0x9f, 0xb3,
	0x0b, 0x46, 0x64, 0x5c, 0x54, 0x85, 0xcb, 0xc3, 0xce, 0x93, 0x4e, 0xf7, 0xc7, 0x9d, 0xe3, 0x7a,
	0x63, 0xd0, 0xea, 0x76, 0x8e, 0x1f, 0xe0, 0x6e, 0xfb, 0x18, 0xb7, 0xd5, 0x0f, 0x10, 0x40, 0xa1,
	0x81, 0x8d, 0xfa, 0xc0, 0x50, 0x25, 0xf6, 0x3d, 0xec, 0x35, 0xd9, 0x77, 0x0e, 0x6d, 0x02, 0x34,
	0x71, 0xbd, 0xd5, 0x39, 0xee, 0x74, 0x9b, 0x86, 0x2a, 0xa3, 0x2d, 0xa8, 0x34, 0x8d, 0x46, 0xb7,
	0xdd, 0xea, 0xf7, 0x5b, 0xdd, 0x8e, 0xaa, 0x20, 0x0d, 0x76, 0x7c, 0xc0, 0xa0, 0x7b, 0xdc, 0x6f,
	0x3c, 0x32, 0x9a, 0xc3, 0xa7, 0xf5, 0xa3, 0xa7, 0x86, 0x9a, 0xd7, 0x7f, 0x06, 0x97, 0x32, 0x2f,
	0xeb, 0xef, 0xf5, 0x0a, 0x10, 0x5d, 0xae, 0xe4, 0xc4, 0xe5, 0xea, 0x25, 0x6c, 0xf6, 0x5c, 0x32,
	0x66, 0x40, 0x42, 0xeb, 0xae, 0xdf, 0x17, 0xaf, 0xb1, 0x6a, 0x14, 0xc6, 0xb9, 0x44, 0x18, 0x57,
	0xa1, 0x24, 0x80, 0x7e, 0x7b, 0x56, 0xc2, 0xe1, 0x58, 0xff, 0xbd, 0x04, 0x5a, 0xac, 0x19, 0x7d,
	0x9f, 0xcb, 0xde, 0x86, 0x4b, 0xa2, 0x67, 0xae, 0xc7, 0xf1, 0xfe, 0x91, 0x28, 0xe3, 0xec, 0x49,
	0xd6, 0xba, 0x53, 0xcf, 0x74, 0xbd, 0x96, 0x3d, 0x26, 0xaf, 0x79, 0xcc, 0xe7, 0x71, 0x8c, 0xa2,
	0x77, 0x60, 0x37, 0x4b, 0xdf, 0xf0, 0xd9, 0x41, 0x83, 0x22, 0x5d, 0x8c, 0x46, 0x84, 0x52, 0xd1,
	0x3f, 0x07, 0x43, 0x16, 0x6c, 0x16, 0x17, 0x9a, 0xe3, 0x42, 0xfd, 0x81, 0xfe, 0xe7, 0x1c, 0xec,
	0xfb, 0x8f, 0x08, 0x0d, 0xc7, 0xf6, 0x4c, 0xcb, 0x26, 0x6e, 0xbc, 0x47, 0x33, 0xbd, 0xf0, 0x15,
	0xeb, 0x06, 0x6c, 0x0a, 0xff, 0xb9, 0x89, 0xb6, 0x6a, 0x89, 0x9a, 0xb6, 0x5a, 0x2e, 0xcb, 0x6a,
	0x38, 0x78, 0x7f, 0x90, 0x79, 0x6a, 0xb9, 0x9f, 0x78, 0x61, 0x79, 0x8b, 0x2a, 0xb5, 0x65, 0xb2,
	0x78, 0xbd, 0x88, 0x02, 0x4a, 0x49, 0x04, 0x14, 0x81, 0xad, 0x25, 0x0e, 0xb4, 0x0b, 0x5a, 0x70,
	0x9e, 0x44, 0xe4, 0xb7, 0x3a, 0x0f, 0x8f, 0xfb, 0x03, 0x76, 0x72, 0x3e, 0x40, 0x15, 0x28, 0xf6,
	0x9f, 0xb4, 0x7a, 0x3d, 0xa3, 0xa9, 0x4a, 0xe8, 0x02, 0x94, 0x05, 0xc4, 0x68, 0xaa, 0x39, 0xb4,
	0x01, 0x25, 0x6c, 0xf4, 0x0d, 0xfc, 0xdc, 0x68, 0xaa, 0x32, 0x3b, 0x6f, 0x0f, 0xea, 0x2d, 0x36,
	0xa3, 0xe8, 0xdf, 0xe5, 0xa0, 0x1a, 0xea, 0x7f, 0x6a, 0x4d, 0x16, 0x6e, 0xa2, 0x2b, 0xcd, 0x78,
	0xde, 0x5b, 0xe3, 0x5d, 0x3b, 0x7a, 0x83, 0x56, 0x12, 0x6f, 0xd0, 0x83, 0xe4, 0x1b, 0xb4, 0x7f,
	0x55, 0x38, 0x5c, 0xb6, 0x62, 0x4a, 0x8b, 0xb7, 0xbc, 0x3f, 0xff, 0x97, 0x2f, 0xc8, 0x8f, 0x95,
	0x92, 0xa4, 0xe6, 0x70, 0xd1, 0xd7, 0x91, 0xea, 0xbf, 0x90, 0xa1, 0x62, 0xbc, 0x22, 0xb6, 0x87,
	0xc9, 0xc8, 0x71, 0xc7, 0xe8, 0xfb, 0xa0, 0x78, 0xac, 0x8c, 0x49, 0xdc, 0xe7, 0xc1, 0x5d, 0x33,
	0x86, 0xa8, 0xf1, 0x3a, 0xc6, 0x41, 0xec, 0xd8, 0x3a, 0x27, 0x2c, 0x07, 0x85, 0x36, 0x0b, 0xc7,
	0x6f, 0xae, 0xf2, 0x5e, 0xf0, 0x24, 0xd5, 0x31, 0x6d, 0x47, 0x5c, 0x78, 0x92, 0x44, 0xf4, 0x10,
	0xb6, 0x08, 0x5b, 0xb5, 0xf1, 0xc2, 0xb4, 0x27, 0x84, 0x97, 0xd6, 0x22, 0xd7, 0xe9, 0xc3, 0x0c,
	0x9d, 0x22, 0x10, 0x5e, 0xe6, 0xd2, 0xbb, 0xa0, 0xf0, 0x4a, 0x1b, 0x8b, 0x27, 0xe3, 0xb9, 0xd1,
	0x19, 0x60, 0xa3, 0xd1, 0xc5, 0xcd, 0xe3, 0xc1, 0xd7, 0x3d, 0x11, 0x4f, 0xd8, 0x78, 0x36, 0x34,
	0xfa, 0x03, 0x55, 0x42, 0x45, 0x90, 0xeb, 0xbd, 0x9e, 0x9a, 0x43, 0x25, 0x50, 0x44, 0x66, 0x2e,
	0x43, 0xfe, 0xd9, 0xd0, 0x18, 0x1a, 0xaa, 0xa2, 0xdf, 0x06, 0x88, 0xc4, 0xfb, 0x90, 0x0e, 0x13,
	0x51, 0x04, 0xb9, 0x6f, 0x04, 0xec, 0x4d, 0x16, 0x88, 0x00, 0x05, 0x6c, 0xb4, 0xbb, 0xcf, 0x0d,
	0x55, 0x7e, 0xac, 0x94, 0x64, 0x55, 0x79, 0xac, 0x94, 0x14, 0x35, 0x8f, 0x8b, 0xfc, 0xd6, 0xd1,
	0x6a, 0x06, 0xe1, 0xff, 0xf1, 0x2f, 0x25, 0xd8, 0x5a, 0x6a, 0x15, 0xe2, 0xfa, 0x0e, 0x0c, 0xdc,
	0x6e, 0x75, 0xea, 0xbc, 0xa8, 0x08, 0x7d, 0x2f, 0xc2, 0x85, 0xfe, 0xa0, 0xcb, 0xe2, 0xff, 0xf8,
	0xe8, 0x6b, 0x56, 0x64, 0x24, 0xb6, 0x85, 0x41, 0xab, 0x6d, 0x74, 0x87, 0x03, 0x35, 0xc7, 0xaa,
	0x51, 0x0f, 0x1b, 0x46, 0xbb, 0x37, 0xf0, 0x11, 0xc1, 0xf9, 0xc0, 0xaa, 0xcc, 0x8a, 0x4a, 0xef,
	0x69, 0xbd, 0x61, 0x3c, 0xea, 0x3e, 0x6d, 0x1a, 0xf8, 0x18, 0x1b, 0x7c, 0xd4, 0x54, 0x95, 0xc3,
	0xbf, 0xe6, 0xa0, 0xdc, 0x0f, 0xfe, 0x2f, 0xa1, 0x97, 0x70, 0x65, 0xc5, 0xcf, 0x06, 0xb4, 0xbf,
	0xd6, 0xaf, 0x94, 0xea, 0x8d, 0xb7, 0xc1, 0xc4, 0x3f, 0x8b, 0x0f, 0x50, 0x1b, 0x54, 0xff, 0x48,
	0xc4, 0x6e, 0x61, 0x59, 0x7d, 0xb6, 0x2f, 0xf7, 0x6a, 0xc6, 0x4c, 0x20, 0xea, 0xa6, 0xf4, 0x89,
	0x84, 0x7a, 0x70, 0x51, 0x88, 0x8b, 0x3d, 0x3c, 0x86, 0x5c, 0xa9, 0xfb, 0x68, 0xb5, 0x9a, 0x35,
	0x95, 0x90, 0x78, 0x0f, 0xc0, 0x97, 0xc8, 0x5f, 0x13, 0x51, 0xac, 0x5b, 0x0a, 0x64, 0x6c, 0x27,
	0x68, 0x71, 0xe6, 0xbb, 0xf7, 0xa0, 0x4c, 0xad, 0x63, 0x4a, 0x46, 0x2e, 0xf1, 0xd0, 0x87, 0x35,
	0xff, 0xef, 0x5c, 0x2d, 0xf8, 0x3b, 0x57, 0x7b, 0x60, 0x91, 0xe9, 0xb8, 0x3b, 0xf7, 0x9b, 0x98,
	0xdf, 0x96, 0xfc, 0x02, 0x48, 0xd9, 0x65, 0xdf, 0x25, 0xde, 0x51, 0xe5, 0xa7, 0xe5, 0xa9, 0x75,
	0x72, 0x30, 0x71, 0x0e, 0xa8, 0x75, 0x52, 0xe0, 0x4c, 0x9f, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0xff, 0x32, 0x8f, 0x7a, 0x10, 0x1c, 0x00, 0x00,
}
